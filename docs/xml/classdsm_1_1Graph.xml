<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdsm_1_1Graph" kind="class" language="C++" prot="public">
    <compoundname>dsm::Graph</compoundname>
    <includes local="no">Graph.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Id</type>
      </param>
      <param>
        <type>typename Size</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdsm_1_1Graph_1acbc9b35b05888f4c98154c34c9ea46e9" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;Id, shared&lt;Node&lt;Id, Size&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::m_nodes</definition>
        <argsstring></argsstring>
        <name>m_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="48" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1Graph_1a82ddbe1275584645f173db51828d202f" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;Id, shared&lt;Street&lt;Id, Size&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::m_streets</definition>
        <argsstring></argsstring>
        <name>m_streets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="49" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1Graph_1aa0f10644c6e30df6880f0c8c26a111d6" prot="private" static="no" mutable="no">
        <type>shared&lt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Id, bool &gt; &gt;</type>
        <definition>shared&lt;SparseMatrix&lt;Id, bool&gt; &gt; dsm::Graph&lt; Id, Size &gt;::m_adjacency</definition>
        <argsstring></argsstring>
        <name>m_adjacency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="50" column="12" bodyfile="src/dsm/headers/Graph.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1Graph_1acf4e0c9e0a9c4829af9c471b67484e9e" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Id, Id &gt;</type>
        <definition>std::unordered_map&lt;Id, Id&gt; dsm::Graph&lt; Id, Size &gt;::m_nodeMapping</definition>
        <argsstring></argsstring>
        <name>m_nodeMapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="51" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdsm_1_1Graph_1a8079d61113212b0766215ab8baa9cdd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dsm::Graph&lt; Id, Size &gt;::Graph</definition>
        <argsstring>()</argsstring>
        <name>Graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="54" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1ae94f60ddcb3ead6fc9d3d479509c7d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dsm::Graph&lt; Id, Size &gt;::Graph</definition>
        <argsstring>(const SparseMatrix&lt; Id, bool &gt; &amp;adj)</argsstring>
        <name>Graph</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Id, bool &gt; &amp;</type>
          <declname>adj</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdsm_1_1Graph" kindref="compound">Graph</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adj</parametername>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>adjacency matrix made by a <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> representing the graph&apos;s adjacency matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="57" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a3006ee4e8a4c7d49102af955c404a06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dsm::Graph&lt; Id, Size &gt;::Graph</definition>
        <argsstring>(const std::unordered_map&lt; Id, shared&lt; Street&lt; Id, Size &gt;&gt;&gt; &amp;streetSet)</argsstring>
        <name>Graph</name>
        <param>
          <type>const std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt;&gt;&gt; &amp;</type>
          <declname>streetSet</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdsm_1_1Graph" kindref="compound">Graph</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>streetSet</parametername>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>map of streets representing the graph&apos;s streets </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a2852d1d70368f1ecdefefc1119ea9ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::buildAdj</definition>
        <argsstring>()</argsstring>
        <name>buildAdj</name>
        <briefdescription>
<para>Build the graph&apos;s adjacency matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a71cf39c14d927106258f048c7fbfe0ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::importMatrix</definition>
        <argsstring>(const std::string &amp;fileName, bool isAdj=true)</argsstring>
        <name>importMatrix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAdj</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Import the graph&apos;s adjacency matrix from a file. If the file is not of a supported format, it will read the file as a matrix with the first two elements being the number of rows and columns and the following elements being the matrix elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to import the adjacency matrix from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isAdj</parametername>
</parameternamelist>
<parameterdescription>
<para>A boolean value indicating if the file contains the adjacency matrix or the distance matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the file is not found or invalid The matrix format is deduced from the file extension. Currently only .dsm files are supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="72" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a5b14efd7ae9736a204c809a1f3b50078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::importOSMNodes</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>importOSMNodes</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Import the graph&apos;s nodes from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to import the nodes from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the file is not found, invalid or the format is not supported </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="76" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a11c7843d1ff6062c5355b0d35fb2295a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::importOSMEdges</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>importOSMEdges</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Import the graph&apos;s streets from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to import the streets from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the file is not found, invalid or the format is not supported </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a0770710257a9986a6af48009373e98bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::addNode</definition>
        <argsstring>(shared&lt; Node&lt; Id, Size &gt;&gt; node)</argsstring>
        <name>addNode</name>
        <param>
          <type>shared&lt; <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id, Size &gt;&gt;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Add a node to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr to the node to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="84" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1ab3f798ef196dcc1011135ac2da68074a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::addNode</definition>
        <argsstring>(const Node&lt; Id, Size &gt; &amp;node)</argsstring>
        <name>addNode</name>
        <param>
          <type>const <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id, Size &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Add a node to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the node to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="87" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a4c39c33880325b56f875bdcbb31fef56" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dsm::Graph&lt; Id, Size &gt;::requires</definition>
        <argsstring>(is_node_v&lt; std::remove_reference_t&lt; Tn &gt;&gt; &amp;&amp;...) void addNodes(Tn &amp;&amp;... nodes)</argsstring>
        <name>requires</name>
        <param>
          <type>is_node_v&lt; std::remove_reference_t&lt; Tn &gt;&gt; &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="90" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1aa4ce444e8e46f21cd7140d3a9dfdce6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>requires is_node_v&lt; std::remove_reference_t&lt; T1 &gt; &gt; &amp;&amp;is_node_v&lt; std::remove_reference_t&lt; Tn &gt; &gt; &amp;&amp;void</type>
        <definition>typename Tn requires is_node_v&lt; std::remove_reference_t&lt; T1 &gt; &gt; &amp;&amp;is_node_v&lt; std::remove_reference_t&lt; Tn &gt; &gt; &amp;&amp;void dsm::Graph&lt; Id, Size &gt;::addNodes</definition>
        <argsstring>(T1 &amp;&amp;node, Tn &amp;&amp;... nodes)</argsstring>
        <name>addNodes</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Tn &amp;&amp;...</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="95" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a9fdbadf03f93c862bdaa2a6c4bf0f389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::addStreet</definition>
        <argsstring>(shared&lt; Street&lt; Id, Size &gt;&gt; street)</argsstring>
        <name>addStreet</name>
        <param>
          <type>shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt;&gt;</type>
          <declname>street</declname>
        </param>
        <briefdescription>
<para>Add a street to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>street</parametername>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>std::shared_ptr to the street to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="99" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a51bcd5cfd4b2960f2f80e510279dd2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dsm::Graph&lt; Id, Size &gt;::addStreet</definition>
        <argsstring>(const Street&lt; Id, Size &gt; &amp;street)</argsstring>
        <name>addStreet</name>
        <param>
          <type>const <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &amp;</type>
          <declname>street</declname>
        </param>
        <briefdescription>
<para>Add a street to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>street</parametername>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the street to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="102" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a4d47b949a69439dda8578ba32f618f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type>requires is_street_v&lt; std::remove_reference_t&lt; T1 &gt; &gt; void</type>
        <definition>requires is_street_v&lt;std::remove_reference_t&lt;T1&gt; &gt; void dsm::Graph&lt; Id, Size &gt;::addStreets</definition>
        <argsstring>(T1 &amp;&amp;street)</argsstring>
        <name>addStreets</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>street</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="106" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a493d70ce8c04f995e0cddec19cfaa18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>requires is_street_v&lt; std::remove_reference_t&lt; T1 &gt; &gt; &amp;&amp;is_street_v&lt; std::remove_reference_t&lt; Tn &gt; &gt; &amp;&amp;void</type>
        <definition>typename Tn requires is_street_v&lt; std::remove_reference_t&lt; T1 &gt; &gt; &amp;&amp;is_street_v&lt; std::remove_reference_t&lt; Tn &gt; &gt; &amp;&amp;void dsm::Graph&lt; Id, Size &gt;::addStreets</definition>
        <argsstring>(T1 &amp;&amp;street, Tn &amp;&amp;... streets)</argsstring>
        <name>addStreets</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>street</declname>
        </param>
        <param>
          <type>Tn &amp;&amp;...</type>
          <declname>streets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="110" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a52dcd5d4731075794981931edd1102a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>shared&lt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Id, bool &gt; &gt;</type>
        <definition>bool dsm::Graph&lt; Id, Size &gt;::adjMatrix</definition>
        <argsstring>() const</argsstring>
        <name>adjMatrix</name>
        <briefdescription>
<para>Get the graph&apos;s adjacency matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::shared_ptr to the graph&apos;s adjacency matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="114" column="12" bodyfile="src/dsm/headers/Graph.hpp" bodystart="430" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1aafee5cedecc1df5574947fe5e9a84fe6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;Id, shared&lt;Node&lt;Id, Size&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::nodeSet</definition>
        <argsstring>() const</argsstring>
        <name>nodeSet</name>
        <briefdescription>
<para>Get the graph&apos;s node map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unordered_map containing the graph&apos;s nodes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="117" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1acdf06c4e7e1e3e48eb37eb9ce331640c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;Id, shared&lt;Street&lt;Id, Size&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::streetSet</definition>
        <argsstring>() const</argsstring>
        <name>streetSet</name>
        <briefdescription>
<para>Get the graph&apos;s street map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unordered_map containing the graph&apos;s streets </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="120" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a63e23423011768496c9ea0c72d3872c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>std::optional&lt;shared&lt;Street&lt;Id, Size&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::street</definition>
        <argsstring>(Id source, Id destination) const</argsstring>
        <name>street</name>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Get a street from the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>The destination node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A std::optional containing a std::shared_ptr to the street if it exists, otherwise std::nullopt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="126" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a87a354651a95424efc2600198f286187" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; DijkstraResult&lt; Id &gt; &gt;</type>
        <definition>std::optional&lt;DijkstraResult&lt;Id&gt; &gt; dsm::Graph&lt; Id, Size &gt;::shortestPath</definition>
        <argsstring>(const Node&lt; Id, Size &gt; &amp;source, const Node&lt; Id, Size &gt; &amp;destination) const</argsstring>
        <name>shortestPath</name>
        <param>
          <type>const <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id, Size &gt; &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id, Size &gt; &amp;</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Get the shortest path between two nodes using dijkstra algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>source node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>destination node </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A DijkstraResult object containing the path and the distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="132" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a507344b6ee7fc9a8d5d7b441197ad30f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; DijkstraResult&lt; Id &gt; &gt;</type>
        <definition>std::optional&lt;DijkstraResult&lt;Id&gt; &gt; dsm::Graph&lt; Id, Size &gt;::shortestPath</definition>
        <argsstring>(Id source, Id destination) const</argsstring>
        <name>shortestPath</name>
        <param>
          <type>Id</type>
          <declname>source</declname>
        </param>
        <param>
          <type>Id</type>
          <declname>destination</declname>
        </param>
        <briefdescription>
<para>Get the shortest path between two nodes using dijkstra algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>source node id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>destination node id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A DijkstraResult object containing the path and the distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="138" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classdsm_1_1Graph" kindref="compound">Graph</ref> class represents a graph in the network. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Id</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the graph&apos;s id. It must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the graph&apos;s capacity. It must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="src/dsm/headers/Graph.hpp" line="46" column="3" bodyfile="src/dsm/headers/Graph.hpp" bodystart="46" bodyend="139"/>
    <listofallmembers>
      <member refid="classdsm_1_1Graph_1a0770710257a9986a6af48009373e98bb" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNode</name></member>
      <member refid="classdsm_1_1Graph_1ab3f798ef196dcc1011135ac2da68074a" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNode</name></member>
      <member refid="classdsm_1_1Graph_1aa4ce444e8e46f21cd7140d3a9dfdce6b" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNodes</name></member>
      <member refid="classdsm_1_1Graph_1a9fdbadf03f93c862bdaa2a6c4bf0f389" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreet</name></member>
      <member refid="classdsm_1_1Graph_1a51bcd5cfd4b2960f2f80e510279dd2dd" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreet</name></member>
      <member refid="classdsm_1_1Graph_1a4d47b949a69439dda8578ba32f618f9c" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreets</name></member>
      <member refid="classdsm_1_1Graph_1a493d70ce8c04f995e0cddec19cfaa18c" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreets</name></member>
      <member refid="classdsm_1_1Graph_1a52dcd5d4731075794981931edd1102a4" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>adjMatrix</name></member>
      <member refid="classdsm_1_1Graph_1a2852d1d70368f1ecdefefc1119ea9ce6" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>buildAdj</name></member>
      <member refid="classdsm_1_1Graph_1a8079d61113212b0766215ab8baa9cdd0" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>Graph</name></member>
      <member refid="classdsm_1_1Graph_1ae94f60ddcb3ead6fc9d3d479509c7d40" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>Graph</name></member>
      <member refid="classdsm_1_1Graph_1a3006ee4e8a4c7d49102af955c404a06a" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>Graph</name></member>
      <member refid="classdsm_1_1Graph_1a71cf39c14d927106258f048c7fbfe0ae" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>importMatrix</name></member>
      <member refid="classdsm_1_1Graph_1a11c7843d1ff6062c5355b0d35fb2295a" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>importOSMEdges</name></member>
      <member refid="classdsm_1_1Graph_1a5b14efd7ae9736a204c809a1f3b50078" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>importOSMNodes</name></member>
      <member refid="classdsm_1_1Graph_1aa0f10644c6e30df6880f0c8c26a111d6" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_adjacency</name></member>
      <member refid="classdsm_1_1Graph_1acf4e0c9e0a9c4829af9c471b67484e9e" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_nodeMapping</name></member>
      <member refid="classdsm_1_1Graph_1acbc9b35b05888f4c98154c34c9ea46e9" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_nodes</name></member>
      <member refid="classdsm_1_1Graph_1a82ddbe1275584645f173db51828d202f" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_streets</name></member>
      <member refid="classdsm_1_1Graph_1aafee5cedecc1df5574947fe5e9a84fe6" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>nodeSet</name></member>
      <member refid="classdsm_1_1Graph_1a4c39c33880325b56f875bdcbb31fef56" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>requires</name></member>
      <member refid="classdsm_1_1Graph_1a87a354651a95424efc2600198f286187" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>shortestPath</name></member>
      <member refid="classdsm_1_1Graph_1a507344b6ee7fc9a8d5d7b441197ad30f" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>shortestPath</name></member>
      <member refid="classdsm_1_1Graph_1a63e23423011768496c9ea0c72d3872c2" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>street</name></member>
      <member refid="classdsm_1_1Graph_1acdf06c4e7e1e3e48eb37eb9ce331640c" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>streetSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
